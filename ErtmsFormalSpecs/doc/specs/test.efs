<Dictionary
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="DataDictionary.xsd"
>
<Specification
 Name="Requirements"
>
</Specification><NameSpaces>
<NameSpace
 Name="Default"
>
<NameSpaces>
<NameSpace
 Name="NameSpace1"
>
</NameSpace></NameSpaces>
<Ranges>
<Range
 MinValue="0"
 MaxValue="1000"
 Precision="IntegerPrecision"
 Default="Infinite"
 NeedsRequirement="FALSE"
 Name="TestRange"
>
<SpecialValues>
<EnumValue
 Value="1000"
 Name="Infinite"
>
</EnumValue></SpecialValues>
</Range><Range
 MinValue="0"
 MaxValue="1"
 Precision="DoublePrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="DoubleRange"
>
</Range></Ranges>
<Procedures>
<Procedure
 NeedsRequirement="FALSE"
 Name="Test"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
<PreCondition>Default.Test.CurrentState in Test.Overlap</PreCondition>
</PreConditions>
<Actions>
<Action>Test.CurrentState &lt;- Test.AllGoThere</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
<StateMachine
 InitialState="Outer"
 NeedsRequirement="FALSE"
>
<States>
<State
 X="60"
 Y="120"
 Width="100"
 Height="50"
 Name="Outer"
>
<StateMachine
 InitialState="Inner"
 NeedsRequirement="FALSE"
>
<States>
<State
 X="360"
 Y="70"
 Width="100"
 Height="50"
 Name="Inner"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></State><State
 X="200"
 Y="210"
 Width="100"
 Height="50"
 Name="Inner2"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="InnerGoToOuter"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="InnerGoToOuter"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Outer</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State></States>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="InOuter"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="InOuter"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Internal"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Internal"
>
<PreConditions>
<PreCondition>CurrentState in Test.Outer.Inner</PreCondition>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Outer.Inner2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State><State
 X="290"
 Y="160"
 Width="100"
 Height="50"
 Name="AllGoThere"
>
<StateMachine
 InitialState="State1"
 NeedsRequirement="FALSE"
>
<States>
<State
 X="140"
 Y="150"
 Width="100"
 Height="50"
 Name="State1"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></State><State
 X="140"
 Y="280"
 Width="100"
 Height="50"
 Name="State2"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></State><State
 X="310"
 Y="220"
 Width="100"
 Height="50"
 Name="State3"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></State></States>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="AllGoToState3"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="AllGoToState3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.AllGoThere.State3</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State><State
 X="140"
 Y="240"
 Width="100"
 Height="50"
 Name="Overlap"
>
<StateMachine
 InitialState="State1"
 NeedsRequirement="FALSE"
>
<States>
<State
 X="140"
 Y="70"
 Width="100"
 Height="50"
 Name="State1"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Overlap.State2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule2"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Overlap.State2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State><State
 X="120"
 Y="230"
 Width="100"
 Height="50"
 Name="State2"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule3"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Overlap.State1</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State><State
 X="350"
 Y="290"
 Width="100"
 Height="50"
 Name="State3"
>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule4"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>CurrentState &lt;- Test.Overlap.State2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</StateMachine></State></States>
</StateMachine></State></States>
</StateMachine></Procedure><Procedure
 NeedsRequirement="FALSE"
 Name="Test2"
>
<Parameters>
<Parameter
 Type="TestRange"
 Name="X"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Increase test range"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Increase test range"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>Variable1 &lt;- X</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></Procedure><Procedure
 NeedsRequirement="FALSE"
 Name="Test3"
>
<Parameters>
<Parameter
 Type="Collections.Structure1"
 Name="X"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
<PreCondition>X.Element1 == 0</PreCondition>
</PreConditions>
<Actions>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></Procedure></Procedures>
<Variables>
<Variable
 Type="TestRange"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable1"
>
</Variable><Variable
 Type="TestRange"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable2"
>
</Variable><Variable
 Type="Boolean"
 DefaultValue="Boolean.False"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="B"
>
</Variable><Variable
 Type="Default.DoubleRange"
 DefaultValue="0.0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="doubleVariable"
>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
<PreCondition>Variable1 == Variable2 OR Variable1 &lt; Variable2</PreCondition>
</PreConditions>
<Actions>
<Action>Test2 ( Variable1 + 1 )</Action>
<Action>Test1()</Action>
<Action>B &lt;- NOT B</Action>
<Action>doubleVariable &lt;- 1.2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace><NameSpace
 Name="Collections"
>
<Ranges>
<Range
 MinValue="0"
 MaxValue="100"
 Precision="IntegerPrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="Range0"
>
</Range></Ranges>
<Structures>
<Structure
 NeedsRequirement="FALSE"
 Name="Structure1"
>
<StructureElement
 TypeName="Range0"
 Default=""
 Mode="Internal"
 NeedsRequirement="FALSE"
 Name="Element1"
>
</StructureElement><StructureElement
 TypeName="Range0"
 Default=""
 Mode="Internal"
 NeedsRequirement="FALSE"
 Name="Element2"
>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="Range0"
 Default="[]"
 NeedsRequirement="FALSE"
 Name="Collection1"
>
</Collection><Collection
 TypeName="Structure1"
 Default="[]"
 NeedsRequirement="FALSE"
 Name="Collection2"
>
</Collection></Collections>
<Functions>
<Function
 Type="Range0"
 NeedsRequirement="FALSE"
 Name="Function1"
>
<Parameters>
<Parameter
 Type="Range0"
 Name="X"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Case1"
>
<Expression>X+1</Expression>
</Case></Cases>
</Function><Function
 Type="Range0"
 NeedsRequirement="FALSE"
 Name="Function2"
>
<Parameters>
<Parameter
 Type="Range0"
 Name="Current"
>
</Parameter><Parameter
 Type="Range0"
 Name="Computed"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Case1"
>
<Expression>Current + Computed</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 NeedsRequirement="FALSE"
 Name="Procedure1"
>
<Parameters>
<Parameter
 Type="Structure1"
 Name="X"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>Variable2 &lt;- X.Element1</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></Procedure></Procedures>
<Variables>
<Variable
 Type="Collection1"
 DefaultValue="[0,1,2,3,4]"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable1"
>
</Variable><Variable
 Type="Range0"
 DefaultValue="3"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable2"
>
</Variable><Variable
 Type="Range0"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable3"
>
</Variable><Variable
 Type="Boolean"
 DefaultValue="False"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable4"
>
</Variable><Variable
 Type="Boolean"
 DefaultValue="False"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable5"
>
</Variable><Variable
 Type="Collections.Range0"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable6"
>
</Variable><Variable
 Type="Range0"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable7"
>
</Variable><Variable
 Type="Collections.Collection2"
 DefaultValue="[Structure1{Element1 =&gt; 1, Element2=&gt;2}]"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable8"
>
</Variable><Variable
 Type="Range0"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable9"
>
</Variable><Variable
 Type="Structure1"
 DefaultValue="Structure1{Element1=&gt;1, Element2=&gt;1}"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable10"
>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions>
<PreCondition>THERE_IS_IN Variable1 | Available(X)</PreCondition>
</PreConditions>
<Actions>
<Action>Variable2 &lt;- FIRST_IN Variable1</Action>
<Action>Variable3 &lt;- LAST_IN Variable1</Action>
<Action>Variable4 &lt;- THERE_IS_IN Variable1 | X &gt; 5</Action>
<Action>Variable5 &lt;- FORALL_IN Variable1 | X &lt; 5</Action>
<Action>Variable1 &lt;- MAP Variable1 USING Function1</Action>
<Action>Variable7 &lt;- REDUCE Variable1 USING Function2 INITIAL_VALUE 1</Action>
<Action>Variable9 &lt;- (FIRST_IN Variable8).Element2</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace><NameSpace
 Name="Structure"
>
<Structures>
<Structure
 NeedsRequirement="FALSE"
 Name="S1"
>
<Procedures>
<StructureProcedure
 NeedsRequirement="FALSE"
 Name="Toto"
>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="&lt;Rule1&gt;"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="&lt;RuleCondition1&gt;"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>El1 &lt;- 27</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
<StateMachine
 InitialState=""
 NeedsRequirement="FALSE"
>
</StateMachine></StructureProcedure></Procedures>
<StructureElement
 TypeName="Integer"
 Default=""
 Mode="Internal"
 NeedsRequirement="FALSE"
 Name="El1"
>
</StructureElement></Structure></Structures>
<Functions>
<Function
 Type="Structure.S1"
 NeedsRequirement="FALSE"
 Name="get"
>
<Cases>
<Case
 Name="&lt;Case1&gt;"
>
<Expression>V1</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 NeedsRequirement="FALSE"
 Name="someParameters"
>
<Parameters>
<Parameter
 Type="Boolean"
 Name="Parameter1"
>
</Parameter><Parameter
 Type="Boolean"
 Name="Parameter2"
>
</Parameter><Parameter
 Type="Boolean"
 Name="Parameter3"
>
</Parameter></Parameters>
<Cases>
</Cases>
</Function></Functions>
<Variables>
<Variable
 Type="Structure.S1"
 DefaultValue="Structure.S1{El1=&gt;3}"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="V1"
>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="&lt;RuleCondition1&gt;"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>get().Toto()</Action>
<Action>someParameters(True, False, True)</Action>
<Action>someParameters(
  Parameter3 =&gt; True, 
  Parameter1 =&gt; False, 
  Parameter2 =&gt; True
)</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace><NameSpace
 Name="Expressions"
>
<Variables>
<Variable
 Type="Integer"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="IntegerVariable"
>
</Variable></Variables>
</NameSpace><NameSpace
 Name="Functions"
>
<Ranges>
<Range
 MinValue="0"
 MaxValue="1416"
 Precision="IntegerPrecision"
 Default="0"
 NeedsRequirement="FALSE"
 Name="TestRange"
>
</Range><Range
 MinValue="0.0"
 MaxValue="10000.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Speed"
>
</Range><Range
 MinValue="0.0"
 MaxValue="12000.0"
 Precision="DoublePrecision"
 Default="0.0"
 NeedsRequirement="FALSE"
 Name="Distance"
>
</Range></Ranges>
<Functions>
<Function
 Type="TestRange"
 NeedsRequirement="FALSE"
 Name="Function1"
>
<Parameters>
<Parameter
 Type="Integer"
 Name="TestParameter"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Case1"
>
<PreConditions>
<PreCondition>TestParameter &lt;= 10</PreCondition>
</PreConditions>
<Expression>4</Expression>
</Case><Case
 Name="Case2"
>
<PreConditions>
<PreCondition>TestParameter &gt; 10</PreCondition>
</PreConditions>
<Expression>7</Expression>
</Case></Cases>
</Function><Function
 Type="TestRange"
 NeedsRequirement="FALSE"
 Name="Function2"
>
<Cases>
<Case
 Name="Case1"
>
<Expression>2</Expression>
</Case></Cases>
</Function><Function
 Type="TestRange"
 NeedsRequirement="FALSE"
 Name="Function3"
>
<Cases>
<Case
 Name="Case1"
>
<Expression>Function1(8, 4) + Function2()</Expression>
</Case></Cases>
</Function><Function
 Type="Speed"
 NeedsRequirement="FALSE"
 Name="Function4"
>
<Parameters>
<Parameter
 Type="Distance"
 Name="d"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Case1"
>
<PreConditions>
<PreCondition>d &lt;= 10.0</PreCondition>
</PreConditions>
<Expression>d + 10.0</Expression>
</Case><Case
 Name="Case2"
>
<Expression>d</Expression>
</Case></Cases>
</Function></Functions>
<Variables>
<Variable
 Type="TestRange"
 DefaultValue="9"
 VariableMode="InOut"
 NeedsRequirement="FALSE"
 Name="V1"
>
</Variable><Variable
 Type="FunctionDoubleToDouble"
 DefaultValue="EmptyDoubleToDoubleFunction"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="FunctionVariable"
>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="&lt;Rule1&gt;"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="&lt;RuleCondition1&gt;"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>V1 &lt;- Function1(&apos;test&apos;)</Action>
</Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 NeedsRequirement="FALSE"
 Name="StoreFunctionValue"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="StoreFunctionValue"
>
<PreConditions>
</PreConditions>
<Actions>
<Action>FunctionVariable &lt;- Function4</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace><NameSpace
 Name="Rules"
>
<Variables>
<Variable
 Type="Integer"
 DefaultValue="0"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable1"
>
</Variable><Variable
 Type="Integer"
 DefaultValue="1"
 VariableMode="Internal"
 NeedsRequirement="FALSE"
 Name="Variable2"
>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Rule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RuleCondition1"
>
<PreConditions>
<PreCondition>Variable1 == 2</PreCondition>
</PreConditions>
<Actions>
<Action>Variable1 &lt;- 4</Action>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SubRule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SubRuleCondition1"
>
<PreConditions>
<PreCondition>Variable2 == 4</PreCondition>
</PreConditions>
<Actions>
<Action>Variable2 &lt;- 7</Action>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SubSubRule1"
>
<PreConditions></PreConditions>
<Actions></Actions>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SubSubCondition1"
>
<PreConditions>
<PreCondition>Variable1 &gt; 100</PreCondition>
</PreConditions>
<Actions>
<Action>Variable2 &lt;- 4
</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RuleCondition2"
>
<PreConditions>
<PreCondition>Variable1 &gt; 0</PreCondition>
<PreCondition>Variable1 &lt; 2</PreCondition>
</PreConditions>
<Actions>
<Action>Variable1 &lt;- 0</Action>
<Action>Variable2 &lt;- 7</Action>
</Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace></NameSpaces>
<Tests>
<Frame
 Name="Some tests"
>
<SubSequences>
<SubSequence
 D_LRBG=""
 Level=""
 Mode=""
 NID_LRBG=""
 Q_DIRLRBG=""
 Q_DIRTRAIN=""
 Q_DLRBG=""
 RBC_ID=""
 RBCPhone=""
 Name="Sequence1"
>
<TestCases>
<TestCase
 Feature="0"
 Case="0"
 NeedsRequirement="FALSE"
 Name="Test case1"
>
<Steps>
<Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step1"
>
<Actions>
<Action>Expressions.IntegerVariable &lt;- 2 + (1 +( 2 ^ 4 - 2)) + 6 / 3 + ( 1 + 7) / 4</Action>
</Actions>
</Step><Step
 IO="NA"
 LevelIN="NA"
 LevelOUT="NA"
 ModeIN="NA"
 ModeOUT="NA"
 Name="Step2"
>
<Expectations>
<Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
>Functions.FunctionVariable ( 50.0 ) == 50.0</Expectation><Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
>Functions.FunctionVariable ( 4.0 ) == 14.0</Expectation></Expectations>
</Step></Steps>
</TestCase></TestCases>
</SubSequence></SubSequences>
</Frame></Tests>
<TranslationDictionary
>
<Translations>
<Translation
>
<SourceTexts>
<SourceText
 Name="The power of the on-board is switched on.
The on-board equipment changes to SB mode."
>
</SourceText></SourceTexts>
<Actions>
<Action>Kernel.PowerOn &lt;- Boolean.True</Action>
</Actions>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="Setup test sequence"
>
</SourceText></SourceTexts>
<Actions>
<Action>EURORADIO.RBCIdOrPhoneNumber.DataState &lt;- DataState.Valid</Action>
<Action>EURORADIO.RBCIdOrPhoneNumber.ID &lt;- &apos;%RBC_ID&apos;</Action>
<Action>EURORADIO.RBCIdOrPhoneNumber.PhoneNumber &lt;- &apos;%RBCPhone&apos;</Action>
<Action>Kernel.Level.DataState &lt;- DataState.Valid</Action>
<Action>Kernel.Level.Value &lt;- %Level</Action>
<Action>Kernel.Mode &lt;- %Mode</Action>
<Action>Kernel.TrainData &lt;- DataState.Valid</Action>
<Action>Kernel.TrainPositionData.DataState &lt;- DataState.Valid</Action>
<Action>Kernel.TrainPositionData.D_LRBG &lt;- %D_LRBG</Action>
<Action>Kernel.TrainPositionData.NID_LRBG &lt;- %NID_LRBG</Action>
<Action>Kernel.TrainPositionData.Q_DIR_LRBG &lt;- %Q_DIRLRBG</Action>
<Action>Kernel.TrainPositionData.Q_DIRTRAIN &lt;- %Q_DIRTRAIN</Action>
<Action>Kernel.TrainPositionData.Q_DLRBG &lt;- %Q_DLRBG</Action>
<Action>Kernel.TrainRunningNumber.Value &lt;- &apos;TR007&apos;</Action>
<Action>Kernel.TrainRunningNumber.DataState &lt;- Default.DataState.Valid</Action>
</Actions>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="The new current mode SB is RECORDED on JRU"
>
</SourceText></SourceTexts>
<Expectations>
<Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
 Name="Expectation"
>JRU.jru1.ReportModeChange.Mode == %Step_ModeIN</Expectation><Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
 Name="Expectation..."
>JRU.jru1.ReportModeChange.Request == Request.Request</Expectation></Expectations>
<PostActions>
<Action>JRU.jru1.ReportLevelChange.Request &lt;- Request.Response</Action>
</PostActions>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="Driver opens desk"
>
</SourceText></SourceTexts>
<Actions>
<Action>TIU.DeskOpen &lt;- True</Action>
</Actions>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="The actual mode SB is DISPLAYED"
>
</SourceText></SourceTexts>
<Expectations>
<Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
 Name="Expectation"
>DMI.DisplayMode == Mode.SB</Expectation></Expectations>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="The on-board equipment requires the driver to enter a Driver ID 
There is NO initial Driver ID value displayed"
>
</SourceText></SourceTexts>
<Expectations>
<Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
 Name=""
>DMI.RequestDriverId.RequestState == Request.Request</Expectation></Expectations>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="The driver enters a correct Driver ID"
>
</SourceText></SourceTexts>
<Actions>
<Action>DMI.RequestDriverId.RequestState &lt;- Request.Response</Action>
<Action>DMI.RequestDriverId.DriverID &lt;- &apos;Henry&apos;</Action>
</Actions>
</Translation><Translation
>
<SourceTexts>
<SourceText
 Name="Train tries to set up a safe connection."
>
</SourceText></SourceTexts>
<Expectations>
<Expectation
 Variable=""
 Blocking="TRUE"
 DeadLine="1000"
 Name=""
>EURORADIO.RequestOpenRbcSession.RequestState == Request.Request</Expectation></Expectations>
</Translation></Translations>
</TranslationDictionary></Dictionary>
